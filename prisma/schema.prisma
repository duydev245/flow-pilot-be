generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemRole {
  id         Int       @id @default(autoincrement())
  role       String
  created_at DateTime  @default(now())
  updated_at DateTime?
  users      User[]
}

model Package {
  id         String       @id @default(uuid()) @db.Uuid
  name       String
  price      Float
  created_at DateTime     @default(now())
  updated_at DateTime?
  status     BinaryStatus
  orders     Order[]
  workspaces Workspace[]
}

model Workspace {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  company_code  String?
  company_name  String
  package_id    String         @db.Uuid
  start_date    DateTime
  expire_date   DateTime
  created_at    DateTime       @default(now())
  updated_at    DateTime?
  status        BinaryStatus
  departments   Department[]
  notifications Notification[] @relation("NotificationWorkspace")
  orders        Order[]
  projects      Project[]
  users         User[]
  package       Package        @relation(fields: [package_id], references: [id])

  @@index([package_id])
}

model Order {
  id           String      @id @default(uuid()) @db.Uuid
  workspace_id String      @db.Uuid
  package_id   String      @db.Uuid
  order_date   DateTime
  total_amount Float
  created_at   DateTime    @default(now())
  updated_at   DateTime?
  status       OrderStatus
  package      Package     @relation(fields: [package_id], references: [id])
  workspace    Workspace   @relation(fields: [workspace_id], references: [id])
  payments     Payment[]

  @@index([workspace_id])
  @@index([package_id])
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  order_id       String        @db.Uuid
  payment_date   DateTime
  amount         Float
  transaction_id String?
  created_at     DateTime      @default(now())
  updated_at     DateTime?
  payment_method PaymentMethod
  status         PaymentStatus
  order          Order         @relation(fields: [order_id], references: [id])

  @@index([order_id])
}

model Department {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  workspace_id String       @db.Uuid
  created_at   DateTime     @default(now())
  updated_at   DateTime?
  status       BinaryStatus
  workspace    Workspace    @relation(fields: [workspace_id], references: [id])
  users        User[]

  @@index([workspace_id])
}

model User {
  id                  String                 @id @default(uuid()) @db.Uuid
  name                String
  email               String                 @unique
  password            String
  avatar_url          String?
  role_id             Int
  workspace_id        String?                @db.Uuid
  department_id       Int?
  is_first_login      Boolean                @default(true)
  password_changed_at DateTime?
  created_at          DateTime               @default(now())
  updated_at          DateTime?
  status              UserStatus
  dailyFocusLogs      DailyFocusLog[]
  microFeedbacks      MicroFeedback[]
  notifications       Notification[]
  overallPerformances OverallPerformance[]
  performanceData     PerformanceData[]
  projectUsers        ProjectUser[]
  refreshTokens       RefreshToken[]
  taskContents        TaskContent[]
  rejectionHistories  TaskRejectionHistory[]
  taskReviews         TaskReview[]           @relation("ReviewerTaskReviews")
  taskUsers           TaskUser[]
  uploads             UploadFile[]
  department          Department?            @relation(fields: [department_id], references: [id])
  role                SystemRole             @relation(fields: [role_id], references: [id])
  workspace           Workspace?             @relation(fields: [workspace_id], references: [id])

  @@index([role_id])
  @@index([workspace_id])
  @@index([department_id])
}

model RefreshToken {
  id          Int       @id @default(autoincrement())
  token       String
  device_info String?
  ip_address  String?
  user_id     String    @db.Uuid
  expired_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  user        User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Notification {
  id                   Int              @id @default(autoincrement())
  user_id              String           @db.Uuid
  title                String?
  content              String?
  is_read              Boolean          @default(false)
  related_task_id      String?          @db.Uuid
  related_project_id   String?          @db.Uuid
  related_workspace_id String?          @db.Uuid
  created_at           DateTime         @default(now())
  updated_at           DateTime?
  type                 NotificationType
  relatedProject       Project?         @relation("NotificationProject", fields: [related_project_id], references: [id])
  relatedTask          Task?            @relation("NotificationTask", fields: [related_task_id], references: [id])
  relatedWorkspace     Workspace?       @relation("NotificationWorkspace", fields: [related_workspace_id], references: [id])
  user                 User             @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([related_task_id])
  @@index([related_project_id])
  @@index([related_workspace_id])
}

model MicroFeedback {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.Uuid
  rating     Int
  created_at DateTime  @default(now())
  updated_at DateTime?
  user       User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model PerformanceData {
  id                Int       @id @default(autoincrement())
  user_id           String    @db.Uuid
  project_id        String    @db.Uuid
  performance_cycle String?
  working_hours     Float?
  task_completed    Int?
  task_delay_count  Int?
  burnout_index     Float?
  quality_score     Float?
  feedback_score    Float?
  notes             String?
  created_at        DateTime  @default(now())
  updated_at        DateTime?
  project           Project   @relation(fields: [project_id], references: [id])
  user              User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([project_id])
}

model OverallPerformance {
  id               Int       @id @default(autoincrement())
  user_id          String    @db.Uuid
  working_hours    Float?
  task_completed   Int?
  task_delay_count Int?
  burnout_index    Float?
  quality_score    Float?
  feedback_score   Float?
  notes            String?
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  user             User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model DailyFocusLog {
  id              Int       @id @default(autoincrement())
  user_id         String    @db.Uuid
  date            DateTime  @db.Date
  focused_minutes Int
  note            String?
  created_at      DateTime  @default(now())
  updated_at      DateTime?
  user            User      @relation(fields: [user_id], references: [id])

  @@index([user_id, date])
}

model Project {
  id            String            @id @default(uuid()) @db.Uuid
  workspace_id  String            @db.Uuid
  name          String
  description   String?
  start_date    DateTime
  end_date      DateTime
  process       Int?
  team_size     Int?
  created_at    DateTime          @default(now())
  updated_at    DateTime?
  status        ProjectStatus
  notifications Notification[]    @relation("NotificationProject")
  performance   PerformanceData[]
  workspace     Workspace         @relation(fields: [workspace_id], references: [id])
  members       ProjectUser[]
  tasks         Task[]

  @@index([workspace_id])
}

model ProjectUser {
  id         Int     @id @default(autoincrement())
  project_id String  @db.Uuid
  user_id    String  @db.Uuid
  role       String?
  project    Project @relation(fields: [project_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  @@unique([project_id, user_id])
  @@index([user_id])
}

model Task {
  id                    String                 @id @default(uuid()) @db.Uuid
  project_id            String                 @db.Uuid
  name                  String
  description           String?
  time_spent_in_minutes Int?
  start_at              DateTime
  completed_at          DateTime?
  start_date            DateTime
  due_date              DateTime
  created_at            DateTime               @default(now())
  updated_at            DateTime?
  status                TaskStatus
  priority              TaskPriority
  notifications         Notification[]         @relation("NotificationTask")
  project               Project                @relation(fields: [project_id], references: [id])
  contents              TaskContent[]
  rejections            TaskRejectionHistory[]
  review                TaskReview?
  assignees             TaskUser[]
  files                 UploadFile[]

  @@index([project_id])
}

model TaskUser {
  id          Int      @id @default(autoincrement())
  task_id     String   @db.Uuid
  user_id     String   @db.Uuid
  assigned_at DateTime
  task        Task     @relation(fields: [task_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@unique([task_id, user_id])
  @@index([user_id])
}

model TaskReview {
  id             Int       @id @default(autoincrement())
  task_id        String    @unique @db.Uuid
  reviewer_id    String    @db.Uuid
  quality_score  Float
  feedback_score Float
  notes          String?
  reviewed_at    DateTime? @default(now())
  created_at     DateTime  @default(now())
  updated_at     DateTime?
  reviewer       User      @relation("ReviewerTaskReviews", fields: [reviewer_id], references: [id])
  task           Task      @relation(fields: [task_id], references: [id])

  @@index([reviewer_id])
}

model UploadFile {
  id          Int       @id @default(autoincrement())
  task_id     String    @db.Uuid
  file_name   String
  file_url    String
  file_size   Int?
  mime_type   String?
  uploaded_at DateTime  @default(now())
  uploaded_by String    @db.Uuid
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  task        Task      @relation(fields: [task_id], references: [id])
  uploader    User      @relation(fields: [uploaded_by], references: [id])

  @@index([task_id])
  @@index([uploaded_by])
}

model TaskContent {
  id         Int               @id @default(autoincrement())
  task_id    String            @db.Uuid
  user_id    String            @db.Uuid
  content    String
  created_at DateTime          @default(now())
  updated_at DateTime?
  type       TaskContentType
  status     TaskContentStatus
  task       Task              @relation(fields: [task_id], references: [id])
  user       User              @relation(fields: [user_id], references: [id])

  @@index([task_id])
  @@index([user_id])
}

model TaskRejectionHistory {
  id          Int       @id @default(autoincrement())
  task_id     String    @db.Uuid
  rejected_by String    @db.Uuid
  rejected_at DateTime
  reason      String
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  reviewer    User      @relation(fields: [rejected_by], references: [id])
  task        Task      @relation(fields: [task_id], references: [id])

  @@index([task_id])
  @@index([rejected_by])
}

enum BinaryStatus {
  active
  inactive
}

enum NotificationType {
  info
  warning
  alert
  task
  project
  system
}

enum OrderStatus {
  pending
  confirmed
  canceled
}

enum PaymentMethod {
  credit_card
  bank_transfer
  momo
  zalo_pay
}

enum PaymentStatus {
  pending
  success
  failed
  refunded
}

enum ProjectStatus {
  not_started
  active
  completed
  inactive
}

enum TaskStatus {
  todo
  doing
  reviewing
  rejected
  completed
  overdued
}

enum TaskPriority {
  low
  medium
  high
}

enum TaskContentType {
  comment
  note
}

enum TaskContentStatus {
  active
  inactive
}

enum UserStatus {
  active
  inactive
}
