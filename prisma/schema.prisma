generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemRole {
  id         Int       @id @default(autoincrement())
  role       String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  users      User[]
}

model Package {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String                @unique
  duration_in_months  Int                   @default(1)
  price               Float
  description         String?
  created_at          DateTime              @default(now())
  updated_at          DateTime?             @updatedAt
  status              BinaryStatus
  orders              Order[]
  workspaces          Workspace[]
  features            Feature[]
  ConsultationRequest ConsultationRequest[]
}

model Feature {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  description String?
  package_id  String       @db.Uuid
  created_at  DateTime     @default(now())
  updated_at  DateTime?    @updatedAt
  status      BinaryStatus
  package     Package      @relation(fields: [package_id], references: [id])
}

model Workspace {
  id           String       @id @default(uuid()) @db.Uuid
  name         String       @unique
  company_code String?      @unique
  company_name String
  package_id   String       @db.Uuid
  start_date   DateTime
  expire_date  DateTime
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt
  status       BinaryStatus
  departments  Department[]
  orders       Order[]
  projects     Project[]
  users        User[]
  package      Package      @relation(fields: [package_id], references: [id])

  @@index([package_id])
  @@index([status])
}

model ConsultationRequest {
  id           Int                @id @default(autoincrement())
  name         String
  email        String             @unique
  phone        String
  company_name String?
  package_id   String             @db.Uuid
  note         String?
  status       ConsultationStatus @default(new) // new|contacted|closed
  created_at   DateTime           @default(now())
  updated_at   DateTime?          @updatedAt

  package Package @relation(fields: [package_id], references: [id])

  @@index([package_id])
}

enum ConsultationStatus {
  new
  contacted
  closed
}

model Order {
  id           String      @id @default(uuid()) @db.Uuid
  workspace_id String?     @db.Uuid
  email        String      @db.VarChar(500)
  package_id   String      @db.Uuid
  total_amount Float
  created_at   DateTime    @default(now())
  updated_at   DateTime?   @updatedAt
  status       OrderStatus @default(pending)
  package      Package     @relation(fields: [package_id], references: [id])
  workspace    Workspace?  @relation(fields: [workspace_id], references: [id])
  payments     Payment[]

  @@index([workspace_id])
  @@index([package_id])
}

enum OrderStatus {
  pending
  paid
  canceled
}

model Payment {
  id           Int           @id @default(autoincrement())
  order_id     String        @db.Uuid
  payment_date DateTime
  amount       Float
  status       PaymentStatus
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  order        Order         @relation(fields: [order_id], references: [id])

  @@index([order_id])
}

enum PaymentStatus {
  pending
  success
  failed
  refunded
}

// model Payment {
//   id             String        @id @default(uuid()) @db.Uuid
//   order_id       String        @db.Uuid
//   payment_date   DateTime
//   amount         Float
//   transaction_id String        @unique
//   created_at     DateTime      @default(now())
//   updated_at     DateTime?     @updatedAt
//   payment_method PaymentMethod @default(bank_transfer)
//   status         PaymentStatus @default(pending)
//   order          Order         @relation(fields: [order_id], references: [id])

//   @@index([order_id])
// }

model PaymentTransaction {
  id                  Int      @id @default(autoincrement())
  gateway             String   @db.VarChar(100)
  transaction_date    DateTime @default(now())
  account_number      String?  @db.VarChar(100)
  sub_account         String?  @db.VarChar(250)
  amount_in           Int      @default(0)
  amount_out          Int      @default(0)
  accumulated         Int      @default(0)
  code                String?  @db.VarChar(250)
  transaction_content String?  @db.Text
  reference_number    String?  @db.VarChar(255)
  body                String?  @db.Text
  createdAt           DateTime @default(now())
}

model Department {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  workspace_id String       @db.Uuid
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt
  status       BinaryStatus
  workspace    Workspace    @relation(fields: [workspace_id], references: [id])
  users        User[]

  @@index([workspace_id])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @unique @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expired_at DateTime
  created_at DateTime @default(now())

  @@unique([email, type])
  @@index([expired_at])
}

model User {
  id                  String                 @id @default(uuid()) @db.Uuid
  name                String
  email               String                 @unique
  password            String
  avatar_url          String?
  role_id             Int
  workspace_id        String?                @db.Uuid
  department_id       Int?
  is_first_login      Boolean                @default(true)
  password_changed_at DateTime?
  created_at          DateTime               @default(now())
  updated_at          DateTime?              @updatedAt
  status              UserStatus
  dailyFocusLogs      DailyFocusLog[]
  workingHoursLogs    WorkingHoursLog[]
  microFeedbacks      MicroFeedback[]
  notifications       Notification[]
  overallPerformances OverallPerformance[]
  performanceData     PerformanceData[]
  projectUsers        ProjectUser[]
  refreshTokens       RefreshToken[]
  taskContents        TaskContent[]
  rejectionHistories  TaskRejectionHistory[]
  taskReviews         TaskReview[]           @relation("ReviewerTaskReviews")
  ownedTaskReviews    TaskReview[]           @relation("TaskOwnerReviews")
  taskUsers           TaskUser[]
  uploads             UploadFile[]
  department          Department?            @relation(fields: [department_id], references: [id])
  role                SystemRole             @relation(fields: [role_id], references: [id])
  workspace           Workspace?             @relation(fields: [workspace_id], references: [id])
  managedProject      Project[]              @relation("ProjectManager")

  @@index([role_id])
  @@index([workspace_id])
  @@index([department_id])
}

model RefreshToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  device_info String?
  ip_address  String?
  user_id     String    @db.Uuid
  expired_at  DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  user        User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Notification {
  id         Int              @id @default(autoincrement())
  user_id    String           @db.Uuid
  title      String?
  content    String?
  is_read    Boolean          @default(false)
  created_at DateTime         @default(now())
  updated_at DateTime?        @updatedAt
  type       NotificationType
  data       Json?
  user       User             @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model MicroFeedback {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.Uuid
  rating     Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  user       User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model PerformanceData {
  id                Int       @id @default(autoincrement())
  user_id           String    @db.Uuid
  project_id        String    @db.Uuid
  performance_cycle String?
  working_hours     Float?
  task_completed    Int?
  task_delay_count  Int?
  burnout_index     Float?
  quality_score     Float?
  feedback_score    Float?
  notes             String?
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  project           Project   @relation(fields: [project_id], references: [id])
  user              User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, project_id])
  @@index([user_id])
  @@index([project_id])
}

model OverallPerformance {
  id               Int       @id @default(autoincrement())
  user_id          String    @db.Uuid
  working_hours    Float?
  task_completed   Int?
  task_delay_count Int?
  burnout_index    Float?
  quality_score    Float?
  feedback_score   Float?
  notes            String?
  created_at       DateTime  @default(now())
  updated_at       DateTime? @updatedAt
  user             User      @relation(fields: [user_id], references: [id])

  @@unique([user_id])
  @@index([user_id])
}

model DailyFocusLog {
  id              Int       @id @default(autoincrement())
  user_id         String    @db.Uuid
  focused_minutes Int
  note            String?
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  user            User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([user_id, created_at])
}

// Optional: Enhanced working hours tracking table
model WorkingHoursLog {
  id              Int       @id @default(autoincrement())
  user_id         String    @db.Uuid
  date            DateTime  @db.Date
  start_time      DateTime?
  end_time        DateTime?
  break_minutes   Int?      @default(0)
  total_minutes   Int?
  is_holiday      Boolean   @default(false)
  is_weekend      Boolean   @default(false)
  overtime_minutes Int?     @default(0)
  notes           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, date])
  @@index([user_id])
  @@index([date])
}

model Project {
  id           String            @id @default(uuid()) @db.Uuid
  workspace_id String            @db.Uuid
  name         String
  description  String?
  start_date   DateTime
  end_date     DateTime
  process      Int?
  team_size    Int?
  created_at   DateTime          @default(now())
  updated_at   DateTime?         @updatedAt
  manager_id   String            @db.Uuid
  manager      User              @relation("ProjectManager", fields: [manager_id], references: [id])
  status       ProjectStatus
  performance  PerformanceData[]
  workspace    Workspace         @relation(fields: [workspace_id], references: [id])
  members      ProjectUser[]
  tasks        Task[]

  @@index([workspace_id])
  @@index([workspace_id, status])
  @@index([manager_id])
}

model ProjectUser {
  id         Int     @id @default(autoincrement())
  project_id String  @db.Uuid
  user_id    String  @db.Uuid
  role       String?
  project    Project @relation(fields: [project_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  @@unique([project_id, user_id])
  @@index([user_id])
}

model Task {
  id                    String                 @id @default(uuid()) @db.Uuid
  project_id            String                 @db.Uuid
  name                  String
  description           String?
  time_spent_in_minutes Int?
  start_at              DateTime
  due_at                DateTime?
  completed_at          DateTime?
  created_at            DateTime               @default(now())
  updated_at            DateTime?              @updatedAt
  status                TaskStatus
  priority              TaskPriority
  project               Project                @relation(fields: [project_id], references: [id])
  contents              TaskContent[]
  rejections            TaskRejectionHistory[]
  reviews               TaskReview[]
  assignees             TaskUser[]
  files                 UploadFile[]
  checklists            TaskChecklist[]

  @@index([project_id])
  @@index([project_id, status])
}

model TaskUser {
  id          Int      @id @default(autoincrement())
  task_id     String   @db.Uuid
  user_id     String   @db.Uuid
  assigned_at DateTime
  task        Task     @relation(fields: [task_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@unique([task_id, user_id])
  @@index([user_id])
}

model TaskReview {
  id Int @id @default(autoincrement())

  task_id       String    @unique @db.Uuid
  reviewer_id   String    @db.Uuid
  task_owner_id String    @db.Uuid
  quality_score Float
  notes         String?
  reviewed_at   DateTime  @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt

  task Task @relation(fields: [task_id], references: [id])

  reviewer   User @relation("ReviewerTaskReviews", fields: [reviewer_id], references: [id])
  task_owner User @relation("TaskOwnerReviews", fields: [task_owner_id], references: [id])

  @@unique([task_id, reviewer_id])
  @@index([reviewer_id])
  @@index([task_owner_id])
}

model UploadFile {
  id          Int       @id @default(autoincrement())
  task_id     String?   @db.Uuid
  file_name   String
  file_url    String?
  file_key    String
  file_size   Int?
  mime_type   String?
  uploaded_at DateTime  @default(now())
  uploaded_by String    @db.Uuid
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  task        Task?     @relation(fields: [task_id], references: [id])
  uploader    User      @relation(fields: [uploaded_by], references: [id])

  @@index([task_id])
  @@index([uploaded_by])
}

model TaskContent {
  id         Int               @id @default(autoincrement())
  task_id    String            @db.Uuid
  user_id    String            @db.Uuid
  content    String
  created_at DateTime          @default(now())
  updated_at DateTime?         @updatedAt
  type       TaskContentType
  status     TaskContentStatus
  task       Task              @relation(fields: [task_id], references: [id])
  user       User              @relation(fields: [user_id], references: [id])

  @@index([task_id])
  @@index([user_id])
}

model TaskRejectionHistory {
  id          Int       @id @default(autoincrement())
  task_id     String    @db.Uuid
  rejected_by String    @db.Uuid
  rejected_at DateTime  @default(now())
  reason      String
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  reviewer    User      @relation(fields: [rejected_by], references: [id])
  task        Task      @relation(fields: [task_id], references: [id])

  @@index([task_id])
  @@index([rejected_by])
}

model TaskChecklist {
  id           Int          @id @default(autoincrement())
  task_id      String       @db.Uuid
  title        String
  status       BinaryStatus
  is_completed Boolean?
  completed_at DateTime?
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt

  task Task @relation(fields: [task_id], references: [id])

  @@index([task_id])
  @@index([status])
}

enum BinaryStatus {
  active
  inactive
}

enum NotificationType {
  info
  warning
  alert
  task
  project
  system
}

enum ProjectStatus {
  not_started
  active
  completed
  inactive
}

enum TaskStatus {
  todo
  doing
  reviewing
  rejected
  completed
  feedbacked
  overdued
}

enum TaskPriority {
  low
  medium
  high
}

enum TaskContentType {
  comment
  note
}

enum TaskContentStatus {
  active
  inactive
}

enum UserStatus {
  active
  inactive
}

enum VerificationCodeType {
  register
  forgot_password
}
